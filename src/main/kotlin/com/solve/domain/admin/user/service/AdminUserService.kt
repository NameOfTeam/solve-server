package com.solve.domain.admin.user.service

import com.sksamuel.scrimage.ImmutableImage
import com.sksamuel.scrimage.webp.WebpWriter
import com.solve.domain.admin.user.dto.request.AdminUserCreateRequest
import com.solve.domain.admin.user.dto.request.AdminUserUpdateRequest
import com.solve.domain.admin.user.dto.response.AdminUserResponse
import com.solve.domain.admin.user.mapper.AdminUserMapper
import com.solve.domain.user.domain.entity.User
import com.solve.domain.user.domain.enums.UserRole
import com.solve.domain.user.error.UserError
import com.solve.domain.user.repository.UserRepository
import com.solve.global.config.file.FileProperties
import com.solve.global.error.CustomException
import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Slice
import org.springframework.data.repository.findByIdOrNull
import org.springframework.security.crypto.password.PasswordEncoder
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.springframework.web.multipart.MultipartFile
import java.io.File
import java.util.*

@Service
class AdminUserService(
    private val userRepository: UserRepository,
    private val passwordEncoder: PasswordEncoder,
    private val fileProperties: FileProperties,
    private val adminUserMapper: AdminUserMapper
) {
    @Transactional(readOnly = true)
    fun getUsers(pageable: Pageable, search: String, role: UserRole): Slice<AdminUserResponse> {
        val users = userRepository.findAllByRoleAndUsernameContainsIgnoreCaseOrEmailContainsIgnoreCase(
            pageable,
            role,
            search,
            search
        )

        return users.map { adminUserMapper.toResponse(it) }
    }

    @Transactional(readOnly = true)
    fun getUser(userId: UUID): AdminUserResponse {
        val user = userRepository.findByIdOrNull(userId) ?: throw CustomException(
            UserError.USER_NOT_FOUND_BY_ID,
            userId.toString()
        )

        return adminUserMapper.toResponse(user)
    }

    @Transactional
    fun createUser(request: AdminUserCreateRequest) {
        if (userRepository.existsByUsername(request.username)) throw CustomException(
            UserError.USERNAME_DUPLICATED,
        )
        if (userRepository.existsByEmail(request.email)) throw CustomException(
            UserError.EMAIL_DUPLICATED,
        )

        val user = User(
            username = request.username,
            email = request.email,
            password = passwordEncoder.encode(request.password),
            introduction = "Generated by Admin"
        )

        request.gender?.let { user.gender = it }
        request.birth?.let { user.birth = it }
        request.role?.let { user.role = it }
    }

    @Transactional
    fun updateUser(userId: UUID, request: AdminUserUpdateRequest): AdminUserResponse {
        val user = userRepository.findByIdOrNull(userId) ?: throw CustomException(
            UserError.USER_NOT_FOUND_BY_ID,
            userId.toString()
        )

        request.password?.let { user.password = passwordEncoder.encode(it) }
        request.introduction?.let { user.introduction = it }
        request.role?.let { user.role = it }

        return adminUserMapper.toResponse(user)
    }

    @Transactional
    fun updateUserAvatar(userId: UUID, file: MultipartFile): AdminUserResponse {
        if (file.isEmpty) throw CustomException(UserError.EMPTY_FILE)

        val user = userRepository.findByIdOrNull(userId) ?: throw CustomException(
            UserError.USER_NOT_FOUND_BY_ID,
            userId.toString()
        )
        val directory = File(fileProperties.path, "avatars")

        if (!directory.exists()) directory.mkdirs()

        val png = File(directory, "${user.id}.png")

        file.transferTo(png)

        ImmutableImage.loader()
            .fromFile(png)
            .scaleTo(256, 256)
            .output(WebpWriter.DEFAULT.withLossless(), File(directory, "${user.id}.webp"))

        png.delete()

        return adminUserMapper.toResponse(user)
    }

    @Transactional
    fun deleteUser(userId: UUID): AdminUserResponse {
        val user = userRepository.findByIdOrNull(userId) ?: throw CustomException(
            UserError.USER_NOT_FOUND_BY_ID,
            userId.toString()
        )

        userRepository.delete(user)

        return adminUserMapper.toResponse(user)
    }
}